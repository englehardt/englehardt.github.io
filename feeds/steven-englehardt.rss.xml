<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Steven Englehardt</title><link>/</link><description></description><atom:link href="/feeds/steven-englehardt.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 02 Sep 2014 00:00:00 -0400</lastBuildDate><item><title>JSONLevelDB</title><link>/jsonleveldb.html</link><description>&lt;p&gt;&lt;a href="https://code.google.com/p/leveldb/"&gt;LevelDB&lt;/a&gt; is a simple and fast key-value
store. It supports a simple API to &lt;code&gt;Push&lt;/code&gt;, &lt;code&gt;Get&lt;/code&gt;, and &lt;code&gt;Delete&lt;/code&gt; (key, value)
byte-string pairs to and from the database with a few extra options for batched 
writes. Similar to SQLite, it's an excellent embedded storage option but should 
provide better &lt;a href="https://leveldb.googlecode.com/svn/trunk/doc/benchmark.html"&gt;performance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/py-leveldb/"&gt;py-leveldb&lt;/a&gt; wraps the C++ library and
replicates most of the API. This includes the requirement that both the key and
value be byte-strings (&lt;code&gt;str&lt;/code&gt; in 2.x and &lt;code&gt;byte&lt;/code&gt; in 3.x). JSONLevelDB wraps the
API exposed by py-leveldb to include an automatic serialization to
JSON when using &lt;code&gt;Put&lt;/code&gt; (both directly and for &lt;code&gt;WriteBatch&lt;/code&gt; objects) and
de-serialization when using &lt;code&gt;Get&lt;/code&gt;.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/36002d4e4fd938d013e2.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;# A wrapper to serialize data read from/written to leveldb in json
# Steven Englehardt
import leveldb
import json

class JsonLevelDB(object):
    def __init__(self, filename, **kwargs):
        self._filename = filename
        self._db = leveldb.LevelDB(self._filename, **kwargs)
    
    def Get(self, key, verify_checksums = False, fill_cache = True):
        return json.loads(self._db.Get(key, verify_checksums=verify_checksums, fill_cache=fill_cache))
    
    def Put(self, key, value, sync = False):
        self._db.Put(key, json.dumps(value), sync=sync)
    
    def Delete(self, key, sync = False):
        self._db.Delete(key, sync=sync)

    def Write(self, write_batch, sync = False):
        self._db.Write(write_batch._batch, sync=sync)

    def RangeIter(self, key_from = None, key_to = None, include_value = True, verify_checksums = False, fill_cache = True):
        iterator = self._db.RangeIter(key_from, key_to, include_value=include_value, verify_checksums=verify_checksums, fill_cache=fill_cache) 
        if include_value:
            for k, v in iterator:
                yield k, json.loads(v)
        else:
            for k in iterator:
                yield k

    def GetStats(self):
        return self._db.GetStats()

class JsonWriteBatch(object):
    def __init__(self):
        self._batch = leveldb.WriteBatch()
    
    def Put(self, key, value):
        self._batch.Put(key, json.dumps(value))

    def Delete(self, key):
        self._batch.Delete(key)&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Englehardt</dc:creator><pubDate>Tue, 02 Sep 2014 00:00:00 -0400</pubDate><guid>tag:,2014-09-02:jsonleveldb.html</guid><category>Code</category></item></channel></rss>